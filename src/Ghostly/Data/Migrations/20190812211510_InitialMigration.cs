// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore.Migrations;

namespace Ghostly.Data.Migrations
{
    public partial class InitialMigration : Migration
    {
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            if (migrationBuilder is null)
            {
                throw new ArgumentNullException(nameof(migrationBuilder));
            }

            migrationBuilder.CreateTable(
                name: "Accounts",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Discriminator = table.Column<int>(nullable: false),
                    State = table.Column<int>(nullable: false),
                    LastSyncedAt = table.Column<DateTime>(nullable: true),
                    Username = table.Column<string>(type: "TEXT COLLATE NOCASE", nullable: true),
                    AvatarUrl = table.Column<string>(nullable: true),
                    Scopes = table.Column<string>(nullable: true),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Accounts", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Activities",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Timestamp = table.Column<DateTime>(nullable: false),
                    Category = table.Column<int>(nullable: false),
                    Kind = table.Column<int>(nullable: false),
                    Constraint = table.Column<int>(nullable: false),
                    Payload = table.Column<string>(nullable: true),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Activities", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Categories",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Name = table.Column<string>(type: "TEXT COLLATE NOCASE", nullable: true),
                    Glyph = table.Column<string>(nullable: true),
                    Expression = table.Column<string>(nullable: true),
                    Kind = table.Column<int>(nullable: false),
                    SortOrder = table.Column<int>(nullable: false),
                    Deletable = table.Column<bool>(nullable: false),
                    Inbox = table.Column<bool>(nullable: false),
                    Archive = table.Column<bool>(nullable: false),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Categories", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Milestones",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Discriminator = table.Column<int>(nullable: false),
                    Name = table.Column<string>(type: "TEXT COLLATE NOCASE", nullable: true),
                    GitHubId = table.Column<long>(nullable: true),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Milestones", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Repositories",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Discriminator = table.Column<int>(nullable: false),
                    Private = table.Column<bool>(nullable: false),
                    Fork = table.Column<bool>(nullable: false),
                    GitHubId = table.Column<long>(nullable: true),
                    Owner = table.Column<string>(type: "TEXT COLLATE NOCASE", nullable: true),
                    Name = table.Column<string>(type: "TEXT COLLATE NOCASE", nullable: true),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Repositories", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Tags",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Discriminator = table.Column<int>(nullable: false),
                    Name = table.Column<string>(type: "TEXT COLLATE NOCASE", nullable: true),
                    GitHubId = table.Column<long>(nullable: true),
                    Description = table.Column<string>(type: "TEXT COLLATE NOCASE", nullable: true),
                    Color = table.Column<string>(nullable: true),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Tags", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Users",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Discriminator = table.Column<int>(nullable: false),
                    GitHubId = table.Column<int>(nullable: true),
                    Login = table.Column<string>(type: "TEXT COLLATE NOCASE", nullable: true),
                    AvatarUrl = table.Column<string>(nullable: true),
                    AvatarHash = table.Column<string>(nullable: true),
                    Name = table.Column<string>(type: "TEXT COLLATE NOCASE", nullable: true),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Users", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Rules",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Name = table.Column<string>(nullable: true),
                    SortOrder = table.Column<int>(nullable: false),
                    Enabled = table.Column<bool>(nullable: false),
                    Expression = table.Column<string>(nullable: true),
                    Star = table.Column<bool>(nullable: false),
                    Mute = table.Column<bool>(nullable: false),
                    MarkAsRead = table.Column<bool>(nullable: false),
                    StopProcessing = table.Column<bool>(nullable: false),
                    CategoryId = table.Column<int>(nullable: true),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Rules", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Rules_Categories_CategoryId",
                        column: x => x.CategoryId,
                        principalTable: "Categories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WorkItems",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Discriminator = table.Column<int>(nullable: false),
                    IsOpen = table.Column<bool>(nullable: false),
                    IsClosed = table.Column<bool>(nullable: false),
                    IsReopened = table.Column<bool>(nullable: false),
                    GitHubId = table.Column<long>(nullable: true),
                    GitHubLocalId = table.Column<int>(nullable: true),
                    IsPullRequest = table.Column<bool>(nullable: true),
                    IsIssue = table.Column<bool>(nullable: true),
                    IsVulnerability = table.Column<bool>(nullable: true),
                    IsRelease = table.Column<bool>(nullable: true),
                    IsCommit = table.Column<bool>(nullable: true),
                    Merged = table.Column<bool>(nullable: true),
                    Locked = table.Column<bool>(nullable: true),
                    Url = table.Column<string>(nullable: true),
                    Title = table.Column<string>(type: "TEXT COLLATE NOCASE", nullable: true),
                    Preamble = table.Column<string>(type: "TEXT COLLATE NOCASE", nullable: true),
                    Body = table.Column<string>(type: "TEXT COLLATE NOCASE", nullable: true),
                    CommitSha = table.Column<string>(nullable: true),
                    AuthorId = table.Column<int>(nullable: true),
                    MergedById = table.Column<int>(nullable: true),
                    MilestoneId = table.Column<int>(nullable: true),
                    RepositoryId = table.Column<int>(nullable: true),
                    CreatedAt = table.Column<DateTime>(nullable: true),
                    UpdatedAt = table.Column<DateTime>(nullable: true),
                    MergedAt = table.Column<DateTime>(nullable: true),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkItems", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WorkItems_Users_AuthorId",
                        column: x => x.AuthorId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WorkItems_Users_MergedById",
                        column: x => x.MergedById,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WorkItems_Milestones_MilestoneId",
                        column: x => x.MilestoneId,
                        principalTable: "Milestones",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_WorkItems_Repositories_RepositoryId",
                        column: x => x.RepositoryId,
                        principalTable: "Repositories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Assignees",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Discriminator = table.Column<int>(nullable: false),
                    UserId = table.Column<int>(nullable: true),
                    WorkItemDataId = table.Column<int>(nullable: true),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Assignees", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Assignees_Users_UserId",
                        column: x => x.UserId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Assignees_WorkItems_WorkItemDataId",
                        column: x => x.WorkItemDataId,
                        principalTable: "WorkItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Comments",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Discriminator = table.Column<int>(nullable: false),
                    GitHubId = table.Column<int>(nullable: true),
                    Url = table.Column<string>(nullable: true),
                    Body = table.Column<string>(type: "TEXT COLLATE NOCASE", nullable: true),
                    AuthorId = table.Column<int>(nullable: true),
                    CreatedAt = table.Column<DateTime>(nullable: true),
                    UpdatedAt = table.Column<DateTime>(nullable: true),
                    WorkItemDataId = table.Column<int>(nullable: true),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Comments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Comments_Users_AuthorId",
                        column: x => x.AuthorId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Comments_WorkItems_WorkItemDataId",
                        column: x => x.WorkItemDataId,
                        principalTable: "WorkItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Notifications",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Discriminator = table.Column<int>(nullable: false),
                    AccountId = table.Column<int>(nullable: false),
                    Timestamp = table.Column<DateTime>(nullable: false),
                    Unread = table.Column<bool>(nullable: false),
                    Muted = table.Column<bool>(nullable: false),
                    Starred = table.Column<bool>(nullable: false),
                    WorkItemId = table.Column<int>(nullable: true),
                    CategoryId = table.Column<int>(nullable: true),
                    GitHubId = table.Column<int>(nullable: true),
                    Reason = table.Column<string>(type: "TEXT COLLATE NOCASE", nullable: true),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Notifications", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Notifications_Categories_CategoryId",
                        column: x => x.CategoryId,
                        principalTable: "Categories",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Notifications_WorkItems_WorkItemId",
                        column: x => x.WorkItemId,
                        principalTable: "WorkItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "Reviews",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    Discriminator = table.Column<int>(nullable: false),
                    GitHubId = table.Column<long>(nullable: false),
                    CreatedAt = table.Column<DateTime>(nullable: false),
                    AuthorId = table.Column<int>(nullable: true),
                    State = table.Column<int>(nullable: false),
                    Url = table.Column<string>(nullable: true),
                    Body = table.Column<string>(nullable: true),
                    WorkItemDataId = table.Column<int>(nullable: true),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Reviews", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Reviews_Users_AuthorId",
                        column: x => x.AuthorId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_Reviews_WorkItems_WorkItemDataId",
                        column: x => x.WorkItemDataId,
                        principalTable: "WorkItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateTable(
                name: "WorkItemTags",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    WorkItemId = table.Column<int>(nullable: false),
                    TagId = table.Column<int>(nullable: false),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_WorkItemTags", x => x.Id);
                    table.ForeignKey(
                        name: "FK_WorkItemTags_Tags_TagId",
                        column: x => x.TagId,
                        principalTable: "Tags",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_WorkItemTags_WorkItems_WorkItemId",
                        column: x => x.WorkItemId,
                        principalTable: "WorkItems",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ReviewComments",
                columns: table => new
                {
                    Id = table.Column<int>(nullable: false)
                        .Annotation("Sqlite:Autoincrement", true),
                    GitHubId = table.Column<long>(nullable: false),
                    CreatedAt = table.Column<DateTime>(nullable: false),
                    UpdatedAt = table.Column<DateTime>(nullable: true),
                    OriginalCommitId = table.Column<string>(nullable: true),
                    CommitId = table.Column<string>(nullable: true),
                    Path = table.Column<string>(nullable: true),
                    Position = table.Column<int>(nullable: true),
                    OriginalPosition = table.Column<int>(nullable: true),
                    Diff = table.Column<string>(nullable: true),
                    Url = table.Column<string>(nullable: true),
                    Body = table.Column<string>(nullable: true),
                    InReplyToId = table.Column<long>(nullable: true),
                    AuthorId = table.Column<int>(nullable: true),
                    ReviewDataId = table.Column<int>(nullable: true),
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ReviewComments", x => x.Id);
                    table.ForeignKey(
                        name: "FK_ReviewComments_Users_AuthorId",
                        column: x => x.AuthorId,
                        principalTable: "Users",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                    table.ForeignKey(
                        name: "FK_ReviewComments_Reviews_ReviewDataId",
                        column: x => x.ReviewDataId,
                        principalTable: "Reviews",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Restrict);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Assignees_UserId",
                table: "Assignees",
                column: "UserId");

            migrationBuilder.CreateIndex(
                name: "IX_Assignees_WorkItemDataId",
                table: "Assignees",
                column: "WorkItemDataId");

            migrationBuilder.CreateIndex(
                name: "IX_Comments_AuthorId",
                table: "Comments",
                column: "AuthorId");

            migrationBuilder.CreateIndex(
                name: "IX_Comments_WorkItemDataId",
                table: "Comments",
                column: "WorkItemDataId");

            migrationBuilder.CreateIndex(
                name: "IX_Notifications_CategoryId",
                table: "Notifications",
                column: "CategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_Notifications_WorkItemId",
                table: "Notifications",
                column: "WorkItemId");

            migrationBuilder.CreateIndex(
                name: "IX_ReviewComments_AuthorId",
                table: "ReviewComments",
                column: "AuthorId");

            migrationBuilder.CreateIndex(
                name: "IX_ReviewComments_ReviewDataId",
                table: "ReviewComments",
                column: "ReviewDataId");

            migrationBuilder.CreateIndex(
                name: "IX_Reviews_AuthorId",
                table: "Reviews",
                column: "AuthorId");

            migrationBuilder.CreateIndex(
                name: "IX_Reviews_WorkItemDataId",
                table: "Reviews",
                column: "WorkItemDataId");

            migrationBuilder.CreateIndex(
                name: "IX_Rules_CategoryId",
                table: "Rules",
                column: "CategoryId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkItems_AuthorId",
                table: "WorkItems",
                column: "AuthorId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkItems_MergedById",
                table: "WorkItems",
                column: "MergedById");

            migrationBuilder.CreateIndex(
                name: "IX_WorkItems_MilestoneId",
                table: "WorkItems",
                column: "MilestoneId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkItems_RepositoryId",
                table: "WorkItems",
                column: "RepositoryId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkItemTags_TagId",
                table: "WorkItemTags",
                column: "TagId");

            migrationBuilder.CreateIndex(
                name: "IX_WorkItemTags_WorkItemId",
                table: "WorkItemTags",
                column: "WorkItemId");
        }

        protected override void Down(MigrationBuilder migrationBuilder)
        {
            if (migrationBuilder is null)
            {
                throw new ArgumentNullException(nameof(migrationBuilder));
            }

            migrationBuilder.DropTable(
                name: "Accounts");

            migrationBuilder.DropTable(
                name: "Activities");

            migrationBuilder.DropTable(
                name: "Assignees");

            migrationBuilder.DropTable(
                name: "Comments");

            migrationBuilder.DropTable(
                name: "Notifications");

            migrationBuilder.DropTable(
                name: "ReviewComments");

            migrationBuilder.DropTable(
                name: "Rules");

            migrationBuilder.DropTable(
                name: "WorkItemTags");

            migrationBuilder.DropTable(
                name: "Reviews");

            migrationBuilder.DropTable(
                name: "Categories");

            migrationBuilder.DropTable(
                name: "Tags");

            migrationBuilder.DropTable(
                name: "WorkItems");

            migrationBuilder.DropTable(
                name: "Users");

            migrationBuilder.DropTable(
                name: "Milestones");

            migrationBuilder.DropTable(
                name: "Repositories");
        }
    }
}
